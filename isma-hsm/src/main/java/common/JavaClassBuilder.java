package common;

import ru.nstu.isma.core.hsm.exp.HMExpression;
import ru.nstu.isma.core.hsm.hybrid.HMPseudoState;
import ru.nstu.isma.core.hsm.hybrid.HMState;
import ru.nstu.isma.core.hsm.linear.HMLinearEquation;
import ru.nstu.isma.core.hsm.linear.HMLinearSystem;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Created by Bessonov Alex
 * on 05.01.2015.
 */
public class JavaClassBuilder {

    private final IndexMapper context;

    private final HMExpressionBuilder hmExpressionBuilder;

    public JavaClassBuilder(IndexMapper context) {
        this.context = context;
        this.hmExpressionBuilder = new HMExpressionBuilder(context);
    }

    /**
     * 1. HybridOdeSystem
     */
    public String buildHybridOdeSystem(String className) {
        StringBuilder java = new StringBuilder();
        printPackage(java);
        printImport(java);
        printInfo(java);
        printClassName(java, className);
        printBuild(java);
//        printOdesMethods(java);
        printEnd(java);
        return java.toString();
    }

    private StringBuilder printPackage(StringBuilder java) {
        return java.append("package ru.nstu.isma.core.simulation.controller;\n");
    }

    private StringBuilder printImport(StringBuilder java) {
        return java.append(
                "import java.util.LinkedList;\n" +
                        "import java.util.List;\n" +
                        "import java.util.function.Function;\n" +
                        "import java.util.function.BiFunction;" +

                        "import ru.nstu.isma.intg.api.dae.Ode;\n" +
                        "import java.io.Serializable;\n" +
                        "import ru.nstu.isma.core.simulation.controller.model.Alg;\n" +
                        "import ru.nstu.isma.core.simulation.controller.model.HybridOdeSystem;\n" +
                        "import ru.nstu.isma.core.simulation.controller.model.HybridSystemPredicate;\n");
    }

    private StringBuilder printInfo(StringBuilder java) {
        return java.append("/**\n" +
                " * Generated by ISMA\n" +
                " * on " + new SimpleDateFormat("dd.MM.yyyy").format(new Date()) + ".\n" +
                " */\n");
    }

    private StringBuilder printClassName(StringBuilder java, String name) {
        java.append("public class " + name + " extends HybridOdeSystem implements Serializable {\n\n");
        java.append("public " + name + "(){  build(); }\n\n");
        return java;
    }

    private StringBuilder printBuild(StringBuilder java) {
        java.append("      private void build() {\n");

        java.append("\n\n//============================\n");
        context.getHsm().getVariableTable().getOdes().forEach(ode -> {
            String rp = hmExpressionBuilder.buildExpression(ode.getRightPart());
            java.append("       addOde(new Ode(")
                    .append(context.getIndexMap().get(ode.getCode()))
                    .append(",(y) -> (double)(").append(rp)
                    .append("), \"" + rp + "\"));\n");
        });
        context.getHsm().getVariableTable().getAlgs().forEach(alg -> {
            String rp = hmExpressionBuilder.buildExpression(alg.getRightPart(), true);
            java.append("       addAlg(new Alg(")
                    .append(context.getIndexMap().get(alg.getCode()))
                    .append(", (BiFunction<double[], Alg, Double> & Serializable)(y, a) -> (double)(").append(rp)
                    .append("), \"" + rp + "\"));\n");
        });

        // состояния ГС
        for (HMState state : context.getHsm().getAutomata().getStates().values()) {
            java.append("\n\n//============================\n");
            addStateEquations(java, state);
            addStateSetters(java, state);
        }

        java.append("\n\n//============================\n");
        context.getHsm().getAutomata().getTransactions().forEach(t ->
                addCondition(java, "addPredicate", t.getSource().getCode(), t.getTarget().getCode(), t.getCondition()));

        //
        for (HMPseudoState ps : context.getHsm().getAutomata().getAllPseudoStates()) {
            addStateEquations(java, ps);
            addStateSetters(java, ps);
            addCondition(java, "addPseudoStatePredicate", "null", ps.getCode(), ps.getCondition());
        }

        java.append("       }\n");
        return java;
    }

    private StringBuilder addStateEquations(StringBuilder java, HMState state) {
        state.getVariables().getOdes().forEach(ode -> {
            String rp = hmExpressionBuilder.buildExpression(ode.getRightPart());
            java.append("       addStateEquation(\"" + state.getCode() + "\", new Ode(")
                    .append(context.getIndexMap().get(ode.getCode()))
                    .append(", (y) -> (double)(").append(rp)
                    .append("), \"" + rp + "\"));\n");
        });

        state.getVariables().getAlgs().forEach(alg -> {
            String rp = hmExpressionBuilder.buildExpression(alg.getRightPart(), true);
            java.append("       addStateEquation(\"" + state.getCode() + "\", new Alg(")
                    .append(context.getIndexMap().get(alg.getCode()))
                    .append(", (BiFunction<double[], Alg, Double> & Serializable)(y, a) -> (double)(").append(rp)
                    .append("), \"" + rp + "\"));\n");
        });
        return java;
    }

    private StringBuilder addStateSetters(StringBuilder java, HMState state) {
        state.getVariables().getSetters().forEach((k, v) -> {
            String rp = hmExpressionBuilder.buildExpression(v);
            java.append("       addStateSetter(\"" + state.getCode() + "\", new Ode(")
                    .append(context.getIndexMap().get(k))
                    .append(", (y) -> (double)(").append(rp)
                    .append("), \"" + rp + "\"));\n");
        });
        return java;
    }

    private StringBuilder addCondition(StringBuilder java, String method, String from, String to, HMExpression condition) {
        String c = hmExpressionBuilder.buildExpression(condition);
        java.append("       " + method + "(new HybridSystemPredicate(\"")
                .append(from).append("\", \"")
                .append(to).append("\", ")
                .append("(Function<double[], Boolean> & Serializable)(y) -> (boolean)(").append(c)
                .append("), \"").append(c).append("\"));\n");
        return java;
    }


    private StringBuilder printEnd(StringBuilder java) {
        return java.append("}");
    }

    /**
     * 2. Выражения
     */

    public String printLinearSystemMatrix(String className) {
        StringBuilder sb = new StringBuilder();
        printLinearSystemMatrixImport(sb);
        printLinearSystemMatrixClass(className, sb);
        return sb.toString();
    }

    private StringBuilder printLinearSystemMatrixClass(String className, StringBuilder java) {
        java.append("public class ").append(className).append(" extends LinearSystemMatrix {\n");
        printInitMatrix(java);
        java.append("}");
        return java;
    }

    private void printInitMatrix(StringBuilder java) {
        java.append("@Override\n");
        java.append("    protected void initMatrix() {\n");
        java.append("      setSize(")
                .append(context.getHsm().getLinearSystem().getVars().size())
                .append(");\n");
        printInitMatrixEq(java);
        java.append("    }\n");

    }

    private void printInitMatrixEq(StringBuilder java) {
        HMLinearSystem ls = context.getHsm().getLinearSystem();

        /*
         * Matrix A
         */
        // rows
        for (int i = 0; i < ls.getEquations().size(); i++) {
            HMLinearEquation e = ls.getEquations().get(i);
            // columns
            for (int j = 0; j < ls.getVars().size(); j++) {
                HMExpression aij = e.getLeftPart().get(j);
                if (aij != null) {
                    String javaAij = hmExpressionBuilder.buildExpression(aij);
                    java.append("      addAElem(").append(i)
                            .append(", ").append(j)
                            .append(", new HMLinearAlg(0,(Function<double[], Double> & Serializable) (y) -> ").append(javaAij)
                            .append(", \"").append(javaAij).append("\"));\n");
                }
            }
        }

        /*
         * Vector B
         */
        for (int i = 0; i < ls.getEquations().size(); i++) {
            HMLinearEquation e = ls.getEquations().get(i);
            HMExpression bi = e.getRightPart();
            String javaBi = hmExpressionBuilder.buildExpression(bi);
            java.append("      addBElem(").append(i)
                    .append(", new HMLinearAlg(0, (Function<double[], Double> & Serializable) (y) -> ").append(javaBi)
                    .append(", \"").append(javaBi).append("\"));\n");
        }
    }

    private StringBuilder printLinearSystemMatrixImport(StringBuilder java) {
        return java.append(
                "package ru.nstu.isma.core.hsm.linear;\n" +
                        "import ru.nstu.isma.core.hsm.linear.HMLinearAlg;\n" +
                        "import ru.nstu.isma.core.hsm.linear.LinearSystemMatrix;" +
                        "import java.io.Serializable;\n" +
                        "import java.util.function.Function;\n\n");
    }
}
