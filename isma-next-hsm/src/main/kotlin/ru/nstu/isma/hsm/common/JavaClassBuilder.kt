package ru.nstu.isma.hsm.common

import ru.nstu.isma.hsm.exp.HMExpression
import ru.nstu.isma.hsm.hybrid.HMState
import ru.nstu.isma.hsm.hybrid.HMTransaction
import java.text.SimpleDateFormat
import java.util.*

/**
 * Created by Bessonov Alex
 * on 05.01.2015.
 */
class JavaClassBuilder(private val context: IndexMapper) {
    private val hmExpressionBuilder: HMExpressionBuilder = HMExpressionBuilder(context)

    /**
     * 1. HybridOdeSystem
     */
    fun buildHybridOdeSystem(className: String): String {
        val java = StringBuilder()
        printPackage(java)
        printImport(java)
        printInfo(java)
        printClassName(java, className)
        printBuild(java)
        //        printOdesMethods(java);
        printEnd(java)
        return java.toString()
    }

    private fun printPackage(java: StringBuilder): StringBuilder {
        return java.append("package ru.nstu.isma.simulation.controller;\n")
    }

    private fun printImport(java: StringBuilder): StringBuilder {
        return java.append(
            """
                import java.util.LinkedList;
                import java.util.List;
                import java.util.function.Function;
                import java.util.function.BiFunction;import ru.nstu.isma.intg.api.dae.Ode;
                import java.io.Serializable;
                import ru.nstu.isma.simulation.controller.model.Alg;
                import ru.nstu.isma.simulation.controller.model.HybridOdeSystem;
                import ru.nstu.isma.simulation.controller.model.HybridSystemPredicate;
                
                """.trimIndent()
        )
    }

    private fun printInfo(java: StringBuilder): StringBuilder {
        return java.append(
            """/**
 * Generated by ISMA
 * on ${SimpleDateFormat("dd.MM.yyyy").format(Date())}.
 */
"""
        )
    }

    private fun printClassName(java: StringBuilder, name: String): StringBuilder {
        java.append("public class $name extends HybridOdeSystem implements Serializable {\n\n")
        java.append("public $name(){  build(); }\n\n")
        return java
    }

    private fun printBuild(java: StringBuilder): StringBuilder {
        java.append("      private void build() {\n")
        java.append("\n\n//============================\n")
        context.hsm.variableTable.odes.forEach { ode ->
            val rp = hmExpressionBuilder.buildExpression(ode.rightPart)
            java.append("       addOde(new Ode(")
                .append(context.indexMap[ode.code])
                .append(",(y) -> (double)(").append(rp)
                .append("), \"$rp\"));\n")
        }
        context.hsm.variableTable.algs.forEach { alg ->
            val rp = hmExpressionBuilder.buildExpression(alg.rightPart, true)
            java.append("       addAlg(new Alg(")
                .append(context.indexMap[alg.code])
                .append(", (BiFunction<double[], Alg, Double> & Serializable)(y, a) -> (double)(").append(rp)
                .append("), \"$rp\"));\n")
        }

        // состояния ГС
        for (state in context.hsm.automata.states.values) {
            java.append("\n\n//============================\n")
            addStateEquations(java, state)
            addStateSetters(java, state)
        }
        java.append("\n\n//============================\n")
        context.hsm.automata.transactions.forEach{ t: HMTransaction ->
            addCondition(
                java,
                "addPredicate",
                t.source?.code,
                t.target?.code,
                t.condition
            )
        }

        //
        for (ps in context.hsm.automata.allPseudoStates) {
            addStateEquations(java, ps!!)
            addStateSetters(java, ps)
            addCondition(java, "addPseudoStatePredicate", "null", ps.code, ps.condition)
        }
        java.append("       }\n")
        return java
    }

    private fun addStateEquations(java: StringBuilder, state: HMState): StringBuilder {
        state.variables.odes.forEach{ ode ->
            val rp = hmExpressionBuilder.buildExpression(ode.rightPart)
            java.append("       addStateEquation(\"" + state.code + "\", new Ode(")
                .append(context.indexMap[ode.code])
                .append(", (y) -> (double)(").append(rp)
                .append("), \"$rp\"));\n")
        }
        state.variables.algs.forEach{ alg ->
            val rp = hmExpressionBuilder.buildExpression(alg.rightPart, true)
            java.append("       addStateEquation(\"" + state.code + "\", new Alg(")
                .append(context.indexMap[alg.code])
                .append(", (BiFunction<double[], Alg, Double> & Serializable)(y, a) -> (double)(").append(rp)
                .append("), \"$rp\"));\n")
        }
        return java
    }

    private fun addStateSetters(java: StringBuilder, state: HMState): StringBuilder {
        state.variables.setters.forEach { (k: String?, v: HMExpression?) ->
            val rp = hmExpressionBuilder.buildExpression(v)
            java.append("       addStateSetter(\"" + state.code + "\", new Ode(")
                .append(context.indexMap[k])
                .append(", (y) -> (double)(").append(rp)
                .append("), \"$rp\"));\n")
        }
        return java
    }

    private fun addCondition(
        java: StringBuilder,
        method: String,
        from: String?,
        to: String?,
        condition: HMExpression?
    ): StringBuilder {
        val c = hmExpressionBuilder.buildExpression(condition)
        java.append("       $method(new HybridSystemPredicate(\"")
            .append(from).append("\", \"")
            .append(to).append("\", ")
            .append("(Function<double[], Boolean> & Serializable)(y) -> (boolean)(").append(c)
            .append("), \"").append(c).append("\"));\n")
        return java
    }

    private fun printEnd(java: StringBuilder): StringBuilder {
        return java.append("}")
    }

    /**
     * 2. Выражения
     */
    fun printLinearSystemMatrix(className: String): String {
        val sb = StringBuilder()
        printLinearSystemMatrixImport(sb)
        printLinearSystemMatrixClass(className, sb)
        return sb.toString()
    }

    private fun printLinearSystemMatrixClass(className: String, java: StringBuilder): StringBuilder {
        java.append("public class ").append(className).append(" extends LinearSystemMatrix {\n")
        printInitMatrix(java)
        java.append("}")
        return java
    }

    private fun printInitMatrix(java: StringBuilder) {
        java.append("@Override\n")
        java.append("    protected void initMatrix() {\n")
        java.append("      setSize(")
            .append(context.hsm.linearSystem.vars.size)
            .append(");\n")
        printInitMatrixEq(java)
        java.append("    }\n")
    }

    private fun printInitMatrixEq(java: StringBuilder) {
        val ls = context.hsm.linearSystem

        /*
         * Matrix A
         */
        // rows
        for (i in ls.equations!!.indices) {
            val e = ls.equations!![i]
            // columns
            for (j in ls.vars.keys.indices) {
                val aij = e!!.leftPart[j]
                if (aij != null) {
                    val javaAij = hmExpressionBuilder.buildExpression(aij)
                    java.append("      addAElem(").append(i)
                        .append(", ").append(j)
                        .append(", new HMLinearAlg(0,(Function<double[], Double> & Serializable) (y) -> ")
                        .append(javaAij)
                        .append(", \"").append(javaAij).append("\"));\n")
                }
            }
        }

        /*
         * Vector B
         */for (i in ls.equations!!.indices) {
            val e = ls.equations!![i]
            val bi = e!!.rightPart
            val javaBi = hmExpressionBuilder.buildExpression(bi)
            java.append("      addBElem(").append(i)
                .append(", new HMLinearAlg(0, (Function<double[], Double> & Serializable) (y) -> ").append(javaBi)
                .append(", \"").append(javaBi).append("\"));\n")
        }
    }

    private fun printLinearSystemMatrixImport(java: StringBuilder): StringBuilder {
        return java.append(
            """
                package ru.nstu.isma.hsm.linear;
                import ru.nstu.isma.hsm.linear.HMLinearAlg;
                import ru.nstu.isma.hsm.linear.LinearSystemMatrix;import java.io.Serializable;
                import java.util.function.Function;
                
                
                """.trimIndent()
        )
    }

}