package ru.nstu.isma.ui.common.rsyntaxtextarea;
/* The following code was generated by JFlex 1.4.3 on 24.01.16 23:41 */

import java.io.*;   
import javax.swing.text.Segment;   
   
import org.fife.ui.rsyntaxtextarea.*;   
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24.01.16 23:41 from the specification file
 * <tt>D:/tmp/isma/isma-ui/src/main/resources/rsyntaxtextarea/LismaTokenMaker.flex</tt>
 */
public class LismaTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\12\1\0\1\11\1\6\22\0\1\11\1\46\1\7"+
    "\1\0\1\0\1\47\1\51\1\6\2\15\1\14\1\52\1\6\1\2"+
    "\1\4\1\13\1\41\11\3\1\47\1\6\1\53\1\50\1\54\1\46"+
    "\1\0\1\1\2\1\1\44\1\5\1\1\1\44\1\1\1\43\4\1"+
    "\1\1\1\1\1\42\1\1\1\1\1\1\1\1\6\1\1\15\1\10"+
    "\1\15\1\46\1\1\1\0\1\20\1\37\1\31\1\26\1\21\1\22"+
    "\1\27\1\36\1\33\2\1\1\34\1\25\1\32\1\24\1\35\1\45"+
    "\1\23\1\16\1\17\1\1\1\30\1\1\1\40\2\1\1\15\1\55"+
    "\1\15\1\46\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\2\2\1\10\3\1\1\4\14\1\6\2\1\11"+
    "\1\12\1\11\3\0\1\13\1\0\1\13\1\14\2\5"+
    "\1\15\1\16\4\1\1\17\7\1\1\20\7\1\1\21"+
    "\1\0\1\3\1\22\12\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\212"+
    "\0\u0142\0\u0170\0\134\0\u019e\0\u01cc\0\134\0\u01fa\0\u0228"+
    "\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\134\0\u04da"+
    "\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\134\0\u05ee\0\u061c"+
    "\0\u064a\0\u0114\0\u0678\0\u06a6\0\u06d4\0\134\0\u0702\0\u0730"+
    "\0\u075e\0\134\0\u078c\0\u07ba\0\u07e8\0\u0816\0\212\0\u0844"+
    "\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\212\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\134\0\u0ac8"+
    "\0\u0af6\0\134\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a"+
    "\0\u0c38\0\u0c66\0\u0c94\0\u0cc2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\10"+
    "\1\30\1\31\1\4\1\32\1\33\1\34\1\4\1\35"+
    "\1\4\1\6\1\36\1\4\1\10\1\4\1\37\2\15"+
    "\1\40\1\41\1\42\1\43\1\44\12\45\1\46\1\45"+
    "\1\47\41\45\57\0\1\4\1\50\1\4\1\51\1\4"+
    "\10\0\30\4\4\0\1\50\5\0\1\37\1\6\1\52"+
    "\34\0\1\6\6\0\1\37\5\0\2\53\1\54\1\6"+
    "\1\52\1\55\2\0\1\53\5\0\3\53\1\55\17\53"+
    "\1\6\4\53\4\0\1\54\6\0\1\6\35\0\1\6"+
    "\14\0\7\11\1\56\1\57\1\11\1\60\43\11\11\0"+
    "\1\12\57\0\1\61\1\62\33\0\1\37\55\0\1\37"+
    "\6\0\1\4\1\50\1\4\1\51\1\4\10\0\1\4"+
    "\1\63\1\4\1\64\11\4\1\65\11\4\1\66\4\0"+
    "\1\50\4\0\1\4\1\50\1\4\1\51\1\4\10\0"+
    "\11\4\1\67\11\4\1\10\4\4\4\0\1\50\4\0"+
    "\1\4\1\50\1\4\1\51\1\4\10\0\17\4\1\70"+
    "\10\4\4\0\1\50\4\0\1\4\1\50\1\4\1\51"+
    "\1\4\10\0\10\4\1\71\5\4\1\72\3\4\1\73"+
    "\5\4\4\0\1\50\4\0\1\4\1\50\1\4\1\51"+
    "\1\4\10\0\5\4\1\74\1\75\21\4\4\0\1\50"+
    "\4\0\1\4\1\50\1\4\1\51\1\4\10\0\15\4"+
    "\1\76\12\4\4\0\1\50\4\0\1\4\1\50\1\4"+
    "\1\51\1\4\10\0\14\4\1\77\13\4\4\0\1\50"+
    "\4\0\1\4\1\50\1\4\1\51\1\4\10\0\2\4"+
    "\1\100\25\4\4\0\1\50\4\0\1\4\1\50\1\4"+
    "\1\51\1\4\10\0\3\4\1\101\24\4\4\0\1\50"+
    "\4\0\1\4\1\50\1\4\1\51\1\4\10\0\2\4"+
    "\1\75\25\4\4\0\1\50\4\0\1\4\1\50\1\4"+
    "\1\51\1\4\10\0\6\4\1\102\21\4\4\0\1\50"+
    "\4\0\1\4\1\50\1\4\1\51\1\4\10\0\4\4"+
    "\1\77\6\4\1\77\1\103\13\4\4\0\1\50\4\0"+
    "\1\4\1\50\1\4\1\51\1\4\10\0\1\77\2\4"+
    "\1\104\24\4\4\0\1\50\4\0\1\4\1\50\1\4"+
    "\1\51\1\4\10\0\10\4\1\105\4\4\1\10\12\4"+
    "\4\0\1\50\4\0\1\4\1\50\1\4\1\51\1\4"+
    "\10\0\6\4\1\106\21\4\4\0\1\50\4\0\1\4"+
    "\1\50\1\4\1\51\1\4\10\0\25\4\1\10\2\4"+
    "\4\0\1\50\54\0\1\37\7\0\1\6\1\52\34\0"+
    "\1\6\6\0\1\37\1\0\1\37\56\0\1\15\56\0"+
    "\1\15\56\0\1\37\12\45\1\0\1\45\1\0\41\45"+
    "\13\0\1\107\45\0\1\4\1\51\34\0\1\4\17\0"+
    "\1\4\35\0\1\4\14\0\2\53\1\0\1\53\1\0"+
    "\1\53\2\0\1\53\5\0\30\53\13\0\1\6\1\52"+
    "\34\0\1\6\14\0\2\53\1\110\1\111\1\0\1\53"+
    "\2\0\1\53\5\0\23\53\1\111\4\53\4\0\1\110"+
    "\3\0\12\60\1\0\52\60\1\112\1\57\45\60\12\61"+
    "\1\0\43\61\1\0\1\4\1\50\1\4\1\51\1\4"+
    "\10\0\2\4\1\113\1\114\24\4\4\0\1\50\4\0"+
    "\1\4\1\50\1\4\1\51\1\4\10\0\1\4\1\77"+
    "\26\4\4\0\1\50\4\0\1\4\1\50\1\4\1\51"+
    "\1\4\10\0\14\4\1\67\13\4\4\0\1\50\4\0"+
    "\1\4\1\50\1\4\1\51\1\4\10\0\5\4\1\115"+
    "\22\4\4\0\1\50\4\0\1\4\1\50\1\4\1\51"+
    "\1\4\10\0\22\4\1\10\5\4\4\0\1\50\4\0"+
    "\1\4\1\50\1\4\1\51\1\4\10\0\11\4\1\105"+
    "\16\4\4\0\1\50\4\0\1\4\1\50\1\4\1\51"+
    "\1\4\10\0\1\105\27\4\4\0\1\50\4\0\1\4"+
    "\1\50\1\4\1\51\1\4\10\0\17\4\1\67\10\4"+
    "\4\0\1\50\4\0\1\4\1\50\1\4\1\51\1\4"+
    "\10\0\6\4\1\116\21\4\4\0\1\50\4\0\1\4"+
    "\1\50\1\4\1\51\1\4\10\0\5\4\1\77\22\4"+
    "\4\0\1\50\4\0\1\4\1\50\1\4\1\51\1\4"+
    "\10\0\11\4\1\117\16\4\4\0\1\50\4\0\1\4"+
    "\1\50\1\4\1\51\1\4\10\0\13\4\1\120\14\4"+
    "\4\0\1\50\4\0\1\4\1\50\1\4\1\51\1\4"+
    "\10\0\4\4\1\77\23\4\4\0\1\50\4\0\1\4"+
    "\1\50\1\4\1\51\1\4\10\0\1\67\13\4\1\121"+
    "\13\4\4\0\1\50\4\0\1\4\1\50\1\4\1\51"+
    "\1\4\10\0\15\4\1\122\12\4\4\0\1\50\4\0"+
    "\1\4\1\50\1\4\1\51\1\4\10\0\4\4\1\122"+
    "\23\4\4\0\1\50\4\0\1\4\1\50\1\4\1\51"+
    "\1\4\10\0\3\4\1\77\24\4\4\0\1\50\4\0"+
    "\1\4\1\50\1\4\1\51\1\4\10\0\1\4\1\123"+
    "\26\4\4\0\1\50\6\0\1\111\35\0\1\111\14\0"+
    "\2\53\1\54\1\6\1\52\1\53\2\0\1\53\5\0"+
    "\23\53\1\6\4\53\4\0\1\54\4\0\1\4\1\50"+
    "\1\4\1\51\1\4\10\0\1\4\1\105\26\4\4\0"+
    "\1\50\4\0\1\4\1\50\1\4\1\51\1\4\10\0"+
    "\17\4\1\10\10\4\4\0\1\50\4\0\1\4\1\50"+
    "\1\4\1\51\1\4\10\0\1\4\1\67\26\4\4\0"+
    "\1\50\4\0\1\4\1\50\1\4\1\51\1\4\10\0"+
    "\7\4\1\77\20\4\4\0\1\50\4\0\1\4\1\50"+
    "\1\4\1\51\1\4\10\0\20\4\1\122\7\4\4\0"+
    "\1\50\4\0\1\4\1\50\1\4\1\51\1\4\10\0"+
    "\5\4\1\124\22\4\4\0\1\50\4\0\1\4\1\50"+
    "\1\4\1\51\1\4\10\0\1\64\27\4\4\0\1\50"+
    "\4\0\1\4\1\50\1\4\1\51\1\4\10\0\1\4"+
    "\1\10\26\4\4\0\1\50\4\0\1\4\1\50\1\4"+
    "\1\51\1\4\10\0\20\4\1\10\7\4\4\0\1\50"+
    "\4\0\1\4\1\50\1\4\1\51\1\4\10\0\6\4"+
    "\1\77\21\4\4\0\1\50\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3312];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\7\1\1\11\2\1\1\11\20\1\1\11"+
    "\6\1\1\11\1\1\3\0\1\1\1\0\1\1\1\11"+
    "\3\1\1\11\24\1\1\11\1\0\1\1\1\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   
	/**   
	 * Constructor.  This must be here because JFlex does not generate a   
	 * no-parameter constructor.   
	 */   
	public LismaTokenMaker() {   
	}   
   
	/**   
	 * Adds the token specified to the current linked list of tokens.   
	 *   
	 * @param tokenType The token's type.   
	 * @see #addToken(int, int, int)   
	 */   
	private void addHyperlinkToken(int start, int end, int tokenType) {   
		int so = start + offsetShift;   
		addToken(zzBuffer, start,end, tokenType, so, true);   
	}   
   
	/**   
	 * Adds the token specified to the current linked list of tokens.   
	 *   
	 * @param tokenType The token's type.   
	 */   
	private void addToken(int tokenType) {   
		addToken(zzStartRead, zzMarkedPos-1, tokenType);   
	}   
   
	/**   
	 * Adds the token specified to the current linked list of tokens.   
	 *   
	 * @param tokenType The token's type.   
	 * @see #addHyperlinkToken(int, int, int)   
	 */   
	private void addToken(int start, int end, int tokenType) {   
		int so = start + offsetShift;   
		addToken(zzBuffer, start,end, tokenType, so, false);   
	}   
   
	/**   
	 * Adds the token specified to the current linked list of tokens.   
	 *   
	 * @param array The character array.   
	 * @param start The starting offset in the array.   
	 * @param end The ending offset in the array.   
	 * @param tokenType The token's type.   
	 * @param startOffset The offset in the document at which this token   
	 *        occurs.   
	 * @param hyperlink Whether this token is a hyperlink.   
	 */   
	public void addToken(char[] array, int start, int end, int tokenType,   
						int startOffset, boolean hyperlink) {   
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
		zzStartRead = zzMarkedPos;   
	}   
   
	/**   
	 * Returns the text to place at the beginning and end of a   
	 * line to "comment" it in a this programming language.   
	 *   
	 * @return The start and end strings to add to a line to "comment"   
	 *         it out.   
	 */   
	public String[] getLineCommentStartAndEnd() {   
		return new String[] { "//", null };   
	}   
   
	/**   
	 * Returns the first token in the linked list of tokens generated   
	 * from <code>text</code>.  This method must be implemented by   
	 * subclasses so they can correctly implement syntax highlighting.   
	 *   
	 * @param text The text from which to get tokens.   
	 * @param initialTokenType The token type we should start with.   
	 * @param startOffset The offset into the document at which   
	 *        <code>text</code> starts.   
	 * @return The first <code>Token</code> in a linked list representing   
	 *         the syntax highlighted text.   
	 */   
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
		resetTokenList();   
		this.offsetShift = -text.offset + startOffset;   
   
		// Start off in the proper state.   
		int state = Token.NULL;   
		switch (initialTokenType) {   
						case Token.COMMENT_MULTILINE:   
				state = MLC;   
				start = text.offset;   
				break;   
   
			/* No documentation comments */   
			default:   
				state = Token.NULL;   
		}   
   
		s = text;   
		try {   
			yyreset(zzReader);   
			yybegin(state);   
			return yylex();   
		} catch (IOException ioe) {   
			ioe.printStackTrace();   
			return new TokenImpl();   
		}   
   
	}   
   
	/**   
	 * Refills the input buffer.   
	 *   
	 * @return      <code>true</code> if EOF was reached, otherwise   
	 *              <code>false</code>.   
	 */   
	private boolean zzRefill() {   
		return zzCurrentPos>=s.offset+s.count;   
	}   
   
	/**   
	 * Resets the scanner to read from a new input stream.   
	 * Does not close the old reader.   
	 *   
	 * All internal variables are reset, the old input stream    
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).   
	 * Lexical state is set to <tt>YY_INITIAL</tt>.   
	 *   
	 * @param reader   the new input stream    
	 */   
	public final void yyreset(Reader reader) {   
		// 's' has been updated.   
		zzBuffer = s.array;   
		/*   
		 * We replaced the line below with the two below it because zzRefill   
		 * no longer "refills" the buffer (since the way we do it, it's always   
		 * "full" the first time through, since it points to the segment's   
		 * array).  So, we assign zzEndRead here.   
		 */   
		//zzStartRead = zzEndRead = s.offset;   
		zzStartRead = s.offset;   
		zzEndRead = zzStartRead + s.count - 1;   
		zzCurrentPos = zzMarkedPos = s.offset;   
		zzLexicalState = YYINITIAL;   
		zzReader = reader;   
		zzAtBOL  = true;   
		zzAtEOF  = false;   
	}   
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LismaTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LismaTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 19: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 20: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 21: break;
        case 18: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 22: break;
        case 16: 
          { addToken(Token.RESERVED_WORD);
          }
        case 23: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 24: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 25: break;
        case 15: 
          { addToken(Token.FUNCTION);
          }
        case 26: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 27: break;
        case 4: 
          { addToken(Token.DATA_TYPE);
          }
        case 28: break;
        case 17: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 29: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 30: break;
        case 13: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 31: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 32: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 33: break;
        case 2: 
          { addToken(Token.OPERATOR);
          }
        case 34: break;
        case 9: 
          { 
          }
        case 35: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 36: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 85: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 86: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
